#!/usr/bin/zsh
#--
# ZSH Configuration
# =============================================================================
#   This file contains configuration settings for interactive `zsh` sessions
# (such as when using a terminal emulator or the console outside of an X
# session).
# 
#   Note that settings which should apply to all `zsh` sessions should be
# placed in the "zshenv" file rather than this one; likewise, settings which
# should only be executed by login shells belong in "zprofile".
# 
#++

# Essential options. These allow for directories to be traveled without the
# use of `cd` and enable extended shell globbing.
setopt auto_cd extended_glob

# The prompt -- intentionally simple.
PROMPT="%# "
RPROMPT="[%~]"

# History settings. History will be appended to rather than overwritten and
# shared amongst `zsh` instances. Duplicate entries into the history are
# ignored.
setopt append_history share_history hist_ignore_dups hist_ignore_all_dups
HISTFILE=~/.zsh_history
SAVEHIST=2000
HISTSIZE=2000

# Auto-completion settings.
autoload -U compinit
compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*:rm:*' ignore-line yes

# Automatically push directories when changing the working directory.
setopt auto_pushd
DIRSTACKSIZE=50

# Initialize `rbenv` and `goenv` if they exist. Produce an appropriate warning
# if either tool is not installed.
for tool in rbenv goenv ; do
	toolbin=$HOME/.$tool/bin
	if [[ -d $toolbin ]] ; then
		export PATH="$PATH:$toolbin"
		eval "$($tool init -)"
	else
		echo "zshrc: W: $tool is not installed."
	fi
	unset toolbin
done

# Set the $GOPATH environment variable to the appropriate location if `go` is
# installed, produce a warning otherwise.
if [[ -x "$(which go)" ]] ; then
	export GOPATH="$HOME/Source:$PATH"
else
	echo 'zshrc: W: go is not installed.'
fi

# Set the default editor -- the editors named in this loop are ordered by
# preference: the first one found will be set as $EDITOR. Produces a warning
# if none of the preferred editors could be found.
for editor in vim vi nano ; do
	if [[ -x "$(which $editor)" ]] ; then
		export EDITOR=$editor
		break
	fi
done
[[ -z $EDITOR ]] && print 'zshrc: W: No default editor set.'

# Alias common text extensions to open directly in $EDITOR if the default
# editor has been set.
if [[ -n $EDITOR ]] ; then
	for format in go md markdown rb rdoc txt text ; do
		alias -s $format=$EDITOR
	done
fi

# Alias `ls` to automatically provide colored output -- use the appropriate
# environment variables in OS X and FreeBSD, otherwise simply alias `ls` to
# `ls --color=auto`.
if [[ $(uname) == 'Darwin' || $(uname) == 'FreeBSD' ]] ; then
	export CLICOLOR='yes'
	export LSCOLORS='ExfxcxdxbxEgEdabagacad'
elif [[ -n `ls --color` && $? == 0 ]] ; then
	alias ls='ls --color=auto'
fi

# Create the `bex` alias for `bundle exec` if `bundle` is available.
[[ -x "$(which bundle)" ]] && alias bex='bundle exec'

# Alias `g` for `git` if `git` is available.
if [[ -x "$(which git)" ]] ; then
	alias g=git
	# Alias `git` for `hub` if `hub` is installed.
	[[ -x "$(which hub)" ]] && alias git=hub
fi

# Activate `autoenv` if it is installed.
for loc in /usr/local/opt/autoenv $HOME/.autoenv ; do
	[[ -d $loc ]] && source "$loc/activate.sh"
done

# Prepend 'sudo ' at the beginning of the line with <Alt>s key binding.
function prepend_sudo(){
	[[ $BUFFER != 'sudo '* ]] && BUFFER="sudo $BUFFER" && CURSOR+=5
}
zle -N prepend_sudo
bindkey "^[s" prepend_sudo

# Use <Control>Z to foreground a background process.
# NOTE: This is extremely useful when used in combination with `vim`, as you
# can use <Control>Z to send `vim` to the background, perform actions in the
# shell, then <Control>Z to bring `vim` back to the foreground.
function bring_to_fg(){
	if [[ ! -z `jobs` ]] && [[ $#BUFFER -eq 0 ]] ; then
		BUFFER='fg'
		zle accept-line
	fi
}
zle -N bring_to_fg
bindkey '^Z' bring_to_fg

# Write appropriate information to the title of the terminal window. This
# allows for dynamic titling (the current working directory when no command
# is being executed, the command and arguments given to it when one is).
case $TERM in
	*xterm*)
		function precmd {
			print -Pn "\e]0;%(1j,%j job%(2j|s|); ,)%~\a"
		}
		function preexec {
			printf "\033]0;%s\a" "$1"
		} ;;
esac

# Source the ~/.zsh_local file if it exists -- this is intended for local
# customizations.
[[ -e ~/.zshrc_local ]] && source ~/.zshrc_local
