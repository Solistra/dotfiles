#!/usr/bin/zsh
#--
# ZSH Configuration
# =============================================================================
#   This file contains configuration settings for interactive `zsh` sessions
# (such as when using a terminal emulator or the console outside of an X
# session).
# 
#   Note that settings which should apply to all `zsh` sessions should be
# placed in the "zshenv" file rather than this one; likewise, settings which
# should only be executed by login shells belong in "zprofile".
# 
#++
# Enable extended shell globbing.
setopt extended_glob

# Make the global `precmd_functions` and `preexec_functions` arrays available.
typeset -ga precmd_functions
typeset -ga preexec_functions

# The prompt -- intentionally simple.
autoload -U colors && colors
PROMPT="
%{$fg_bold[magenta]%}%m%{$reset_color%} %{$fg_bold[yellow]%}%~%{$reset_color%}
%{$fg_bold[green]%}%# %{$reset_color%}"

# History settings. History will be appended to rather than overwritten and
# shared amongst `zsh` instances. Duplicate entries into the history are
# ignored.
setopt append_history share_history hist_ignore_dups hist_ignore_all_dups
HISTFILE=~/.zsh_history
SAVEHIST=2000
HISTSIZE=2000

# Auto-completion settings.
autoload -U compinit && compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*:rm:*' ignore-line yes

# Automatically push directories when changing the working directory.
setopt auto_pushd
DIRSTACKSIZE=50

# Allow "command not found" completion if the 'command-not-found' package has
# been installed.
[[ -f /etc/zsh_command_not_found ]] && source /etc/zsh_command_not_found

# Initialize `rbenv` if it is installed.
if [[ -d ~/.rbenv/bin ]] ; then
  export PATH=$PATH:~/.rbenv/bin
  eval "$(rbenv init -)"
else
  # Warn if `rbenv` was not found.
  print 'zshrc: W: rbenv is not installed.'
fi

# Set the default editor.
for editor in vim vi nano ; do
  if [[ -x "$(command -v $editor)" ]] ; then
    export EDITOR=$editor
    break
  fi
done

# Warn if no default editor is set.
[[ -z $EDITOR ]] && print 'zshrc: W: No default editor set.'

# Create the `bex` alias for `bundle exec` if `bundle` is available.
[[ -x "$(command -v bundle)" ]] && alias bex='bundle exec'

# Alias `g` for `git` if `git` is available.
[[ -x "$(command -v git)" ]] && alias g=git

# Activate `autoenv` if it is installed.
for loc in /usr/local/opt/autoenv $HOME/.autoenv ; do
  [[ -d $loc ]] && source "$loc/activate.sh"
done

# Prepend 'sudo ' at the beginning of the line with <Alt>s key binding.
function prepend_sudo(){
  [[ $BUFFER != 'sudo '* ]] && BUFFER="sudo $BUFFER" && CURSOR+=5
}
zle -N prepend_sudo
bindkey "^[s" prepend_sudo

# Use <Control>Z to foreground a background process.
function bring_to_fg(){
if [[ -n "$(jobs)" && $#BUFFER -eq 0 ]] ; then
    BUFFER='fg'
    zle accept-line
  fi
}
zle -N bring_to_fg
bindkey '^Z' bring_to_fg

# Make the directory, then `cd` into it.
function mcd(){
  mkdir -p "$1" && cd "$1"
}

# Write appropriate information to the title of the terminal window. This
# allows for dynamic titling (the current working directory when no command
# is being executed, the command and arguments given to it when one is).
case $TERM in
  xterm* | screen*)
    function precmd {
      print -Pn "\e]0;%(1j,%j job%(2j|s|); ,)%~\a"
    }
    function preexec {
      printf "\033]0;%s\a" "$1"
    }
  ;;
esac

# Source the ~/.zsh_local file if it exists -- this is intended for local
# customizations.
[[ -e ~/.zshrc_local ]] && source ~/.zshrc_local
